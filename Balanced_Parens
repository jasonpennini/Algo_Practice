/*
 * write a function that takes a string of text and returns true if
 * the parentheses are balanced and false otherwise.
 *
 * Example:
 *   balancedParens('(');  // false
 *   balancedParens('()'); // true
 *   balancedParens(')(');  // false
 *   balancedParens('(())');  // true
 *
 * Step 2:
 *   make your solution work for all types of brackets
 *
 * Example:
 *  balancedParens('[](){}'); // true
 *  balancedParens('[({})]');   // true
 *  balancedParens('[(]{)}'); // false
 *
 * Step 3:
 * ignore non-bracket characters
 * balancedParens(' const wow = { yo: thisIsAwesome() }'); // true
 * balancedParens(' const newton = () => { telescopes.areSicc(); '); // false
 *
 *
 */

// function takes in a string of text and returns true if parenthesis inside string close each other off
function balancedParens(string) {
    console.log(string)
    if(typeof string!=="string") {
        return "input is not a string"
    }
    let map = {
        ")":"(",
        "}":"{",
        "]":"["
    }
    let stack=[];
    let brackets=["(", ")", "[", "]", "{", "}"]
    for(let i=0; i < string.length; i++) {
        console.log(string)
        
        
        // for each index in a string, check whether it is any type of opening bracket
        // if it is, then push to an array named stack
        if(string[i]==="(" || string[i]==="{" || string[i]==="[") {
            stack.push(string[i])
            console.log(stack[stack.length-1])
        }
        // if the character at index i is not an opening bracket
        // check the value in our map object for the character at this string's index, is equal to the the stack array's final element 
        // if they are equal it means we have found a closing bracket, so we can pop the element from the stack array, leaving it empty

        else if(stack[stack.length-1]===map[string[i]]) {
            console.log(stack)
            stack.pop()
            console.log(stack)
        } 
        // if neither condition is met, we do not have an opening or closing bracket, so our string is not balanced and return false
        else return false;
     }
    

    // if all characters in the string are checked, evaluate this ternary. If the stack array has length return false. Otherwise,
    // all opening and closing brackets have offset each other, so return true if the array has no length. 
    return stack.length ? false : true

}

// console.log(balancedParens('('));  // false
// console.log(balancedParens('()')); // true
// console.log(balancedParens(')())'));  // false
// console.log(balancedParens('(())'));  // true
// console.log(balancedParens(4));  // "input is not a string"
// console.log(balancedParens('[](){}')); // true
// console.log(balancedParens('[({})]'));   // true
// console.log(balancedParens('[(]{)}')); // false'

console.log(balancedParens(' const wow = { yo: thisIsAwesome() }')); // true
console.log(balancedParens(' const newton = () => { telescopes.areSicc(); ')); // false